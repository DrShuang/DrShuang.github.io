{"meta":{"title":"小小程序员的博客","subtitle":"学习经验和总结","description":"小小程序员的博客","author":"DrShuang","url":"https://drshuang.github.io","root":"/"},"pages":[{"title":"404","text":"","path":"404/index.html","date":"11-06","excerpt":""},{"title":"search","text":"","path":"search/index.html","date":"11-06","excerpt":""}],"posts":[{"title":"Untitled-1","text":"","path":"2019/12/06/Untitled-1/","date":"12-06","excerpt":"","tags":[]},{"title":"JavaScript操作DOM","text":"使用 Javascript i操作DOM时通常分为三类: DOM Core(核心)、HTML_-DOM和CSS-DOM 节点和节点关系DOM是以树状结构组织的HTML文档，根据DOM概念，我们可以知道.HTML文档中个标签或元素都是一个节点，在DOM中是这样规定的。 整个文档是一个文档节点 每个HTML标签是一个元素节点 包含在HTML元素中的文本是文本节点 每个HTML属性是一个属性节点 注释属于注释节点 访问节点使用 getelement系列方法访问指定节点在HTML文档中，访问节点的标准方法就是我们之前学习的 getelement系列方法，即getelementByld()、 etelementsByName()和 getelementsByTayName(),只是它们查找的方法略有不同。 getelementbyld():返回按d属性查找的第一个对象的引用。getelementsbyname():返回按带有指定名称nane查找的对象的集合，由于一个文档中可能会有多个同名节点(如复选框、单选按钮)，因此返回的是元素数组。getelementsby Tagname():返回带有指定标签名 Tagname查找的对象的集合，由于一个文档中可能会有多个同类型的标签节点(如图片组、文本输入框).因此返回元素数组 根据层奖关系访问节点通过 getelementbyld()、9 getelementsb yname()和 getelementsby Tagname()这三种方法可查看ML文档中的任何元素，但是这三种方法都会忽略文档的结构，因此在 HTML DON中提供了如3-1所示的一些节点属性，这些属性可遵循文档的结构，在文档的局部进行“短距离地查找元素.节点属性 属性名称 &emsp; 描述 parentNode 返回节点的父节点 childNodes 返回子节点集合childnodes[i] firstChild 返回节点的第一个子节点，最普遍的用法是访问该元素的文本节点 lastChild 返回节点的最后一个子节点 nextSibling 下一个节点 previousSibling 上一个节点 Element属性 属性名称 &emsp; 描述 first-ElementChild 返回节点的第一个子节点，最普遍的用法是访问该元素的文本节点 last-ElementChild 返回节点的最后一个子节点 nextElementSibling 下一个节点 previousElementSibling 上一个节点 需要获取不同的节点时，使用节点属性和 element属性的写法如下所示， oParent表示当前节点 >onext = oParent.nextElementSibling || oParent.nextSibling //获取下一个节点 >oPre = oParent.previouselementsibling || oParent. previousSibling //获取上一个节点 >ofirst = parent.firstelementchild || oParent firstChild //获取第一个子节点 >olast = oParent.lastElementChild I oParent.lastChild //获取最后一个子节点 >例如，获取列表＜ul＞中第一个节点，代码如下所示。 >var obj = document. getelementbyid(\"news\"); >var str = obj.lasteElementChild.firstElementChild. innerHTML || obj.lastChild.firstChild.innerHTML >alert(str) 节点信息节点是DOM层次结构中的任何类型的对象的通用名称，每个节点都拥有包含着关于节点某些信息的属性，这些属性如下 nodeName(节点名称)nodeValue(节点值)nodeType(节点类型) nodename属性包含某个节点的名称,元素节点的nodename是标签名称，属性节点的nodename是属性名称，文本节点的nodename永远是＃text.文档节点的nodename永远是＃documentnodevalue节点值,对于文本节点，nodevalue属性包含文本:对于属性节点，nodevalue属性包含属性值; nodevalue属性对于文档节点和元素节点是不可用的。nodetype属性可返回节点的类型，是一个只读属性，如返回的是元索节点、文本节点、注释节点类型等节点类型 节点类型 &emsp; nodetype值 元素element 1 属性attr 2 文本text 3 注释comments 8 文档document 9 操作节点的属性HTML DON提供了获取及改变节点属性值的标准方法。如下所示。getattribute l“属性名”):用来获取属性的值。setattribute(“属性名”，“属性值”):用来设置属性的值 创建和插入节点使用 Javascript操作DOM有很多方法可以创建或增加一个新节点 属性名称 &emsp; 描述 createElement( tagName) 创建一个标签名为 tagname I的新元素节点 AappendChild( B) 把B节点追加至A节点的末尾 InsertBefore( A, B) 把A节点插入B节点之前 cloneBNode( deep) 复制某个指定的节点 注意 Insert Before(A.B)中有两个参数。A是必选项，表示新插入的节点;B是可选项，表示新节点被插入B节点的前面。clonenode(dep)中的参数dep为布尔値，若dep值为true，则复制该节点及该节点的所有子节点，若dep值为 false，则只复制该节点和其属性。 删除和替换节点使用 Core HTML删除和替换节点的方法 属性名称 &emsp; 描述 removeChild( node) 删除指定的节点 replaceChild( newnode, oldnode) 用其他的节点替换指定的节点 方法 replacechild(newnode， oldnode)中的两个参数， newnode是替换的新节点， oldnode是要被替换的节点。 style属性常用属性 类别 &emsp; 属性 background(背景) background Color、backgroundimage、backgroundrepeat text(文本) fontSize、fontWeight、textAlign、textDecoration、font、color padding(边距) padding、paddingTop、paddingBottom、paddingLeft、paddingRight border(边框) borderTop、borderBottom、borderLeft、borderRight 常用事件 名称 &emsp; 描述 onclick 当用户单击某个对象时调用事件 onmouseover 鼠标移到某元素之上 onmouseout 鼠标从某元素移开 onmousedown 鼠标按钮被按下 className属性在 HTML DOM中，className属性可设置或返回元素的 class样式语法HTML元素.classname＝＂样式名称” 获取元素样式语法HTML元素.style.样式属性 &emsp;&emsp;在 javascript I中，使用＂HTML元素.style.样式属性 ”的方式只能获取内联样式的属性值，无法获取内部样式表或外部样式表中的属性值，但是在实际工作中通常是样式和内容相分离的、所以实际工作中并不用“HTML元素. style.样式属性”这种方式获取样式的属性值微软为每个元素提供了一个 currentStyle对象，它包含了所有元素的style对象的特性和任何未被覆盖的CSS规则的style特性，currentStyle对象与style对象的使用方式一样语法HTML元素. currentstyle.样式属性 &emsp;&emsp;虽然使用 currentstyle可以获取样式属性的值，但是它只局限于E浏览器，其他浏览器却无法获取样式的属性值.不过DOM提供了ー个 getComputedStyle()方法，这个方法接收两个参数，需要获取样式的属性值。语法document.defaultview. getcomputedstyle(元素，nu11).属性; HTML中元素的属性 属性 &emsp; 描述 offsetLeft 返回当前元素左边界到它上级元素的左边界的距离，只读属性 offsetTop 返回当前元素上边界到它上级元素的上边界的距离，只读属性 offsetHeight 返回元素的高度 offsetWidth 返回元素的宽度 offsetParent 返回元素的偏移容器，即对最近的动态定位的包含元素的引用 scrollTop 返回匹配元素的滚动条的垂直位置 scrollLeft 返回匹配元素的滚动条的水平位置 clientWidth 返回元素的可见宽度 clientHeight 返回元素的可见高度 &emsp;&emsp;在网页中要实现获取滚动条滚动距离，这就需要使用 scrollTop、 scrollLeft这丙个属性，获得的数值单位是像素(px)，对于不滚动的元素，这两个属性值总是0。这两个属性获取滚动条在窗口中滚动的距离，语法如下。语法 document, documentelement scrolltop:document documentelement, scroll Left: 或者 document, body scroll Top:document body. scrollleft: &emsp;&emsp;以上两种写法的两句代码分别可以获取滚动条距窗口顶端和左测滚动的距离，这两种写法稍有不同，标准浏览器只认识 document.documentElement.scrollTop这种写法，但是 Chrome却不认识该写法,在有文档声明时， Chrome只认识 document.body.scrollTop，所以这两种写法在同一个浏览器中只会有一个值生效。例如，当document.body.scrollTop能取到值时document.documentElement.scrollTop就会始终为0,反之亦然。所以要想得到网页真正的 scrolltop值,可以这样写 : var stop=document.documentElement.scrollTop || document.body.scrollTop; &emsp;&emsp;这样，两个值总会有一个恒为0.所以不用担心会对真正的 scrollTop造成影响。但是仅仅使用这两个属性还无法完成随鼠标滚动的图片效果，还需要有事件来触发。在 Javascript中.一个onscroll页面加载事件，在前面的章节中已经学习:另外一个 onscroll事件用于捕捉页面垂直或水平的滚动。","path":"2019/11/25/JavaScript操作DOM/","date":"11-25","excerpt":"","tags":[{"name":"Javascript","slug":"Javascript","permalink":"https://drshuang.github.io/tags/Javascript/"}]},{"title":"JavaScript操作BOM","text":"window对象浏览器对象模型(BOM)是 Javascript a的组成之一，它提供了独立于内容与浏览器窗口进行交互的对象，使用浏览器对象模型可以实现与HTML的交互。它的作用是将相关的元素组织包装起来,提供给程序设计人员使用，从而降低开发人员的劳动量.提高设计Web页面的能力。BOM是一个分层结构。window对象是整个BOM的核心.在浏览器中打开网页后.首先看到的是浏览器窗口.即顶层的 window对象:其次是网页文档内容.即 document(文档)。它的内容包括一些超链接(link)、表单(fam)、( anchor)等，表单由文本框(text)、单选按钮( radio)、按钮( button)等表单元素组成。在浏览器对象结构中，除了document对象外， window对象之下还有两个对象:地址对象(caon)和历史对象( history).它们对应于浏览器地址栏和前进/后退按钮，我们可以利用这些对象的方法，实现类似的功能。使用BOM通常可实现如下功能。 弹出新的浏览器窗口。 移动、关闭浏览器窗口及调整窗口的大小。 在测览器窗口中实现页面的前进、后退功能。window对象也称为浏览器对象。当浏览器打开HTML文档时，通常会创建一个window对象。如果文档定义了一个或多个框架，浏览器将为原始文档创建一个 window对象，同时为每个框架另外创建一个 window对象。 常用属性 名称 &emsp; 描述 history 有关客户访问过的URL的信息 location 有关当前URL的信息 screen 只读属性，包含有关客户端显示屏幕的信息 语法： window.属性名=“属性值” 例：window.location=”http://www.baidu.com&quot;; 常用方法 名称 &emsp; 描述 prompt（） 显示可提示用户输入的对话框 alert（） 显示一个带有提示信息和一个”确定“按钮的警示对话框 confirm（） 显示一个带有提示信息、“确定”和“取消”按钮的对话框 close（） 关闭浏览器窗口 open（） 打开一个新的浏览器窗口，加载给定的URL所指定的文档 setTimeout（） 在指定的毫秒数后调用函数或计算表达式 setInterval（） 按照指定的周期（毫秒）来调用函数或表达式 语法：window.方法名（）； 例：window.alert(); confirm()与alert（）、prompt（）的区别 alert（） &emsp; 一个参数，仅显示警告对话框的消息，无返回值，不能对脚本产生任何改变 prompt（） 两个参数，输入对话框，用来提示用户输入一些信息，单击取消按钮返回null，单击确定按钮返回用户输入的信息 confirm（） 一个参数，确认对话框，显示提示对话框的消息、确定和返回按钮，单击确认按钮返回true，单击取消按钮返回false，因此与if-else搭配使用 open（）方法： window.open(“弹出窗口的URL”,”窗口名称”,”窗口特征”)； 窗口特征属性 名称 &emsp; 描述 height、width 窗口文档显示区的高度、宽度，亿像素计。 left、top 窗口的x、y坐标 toolbar=yes/no/1/0 是否显示浏览器的工具栏，默认yes scrollbars=yes/no/1/0 是否显示滚动条，默认yes location=yes/no/1/0 是否显示地址栏，默认yes status=yes/no/1/0 是否添加状态栏，默认yes menubar=yes/no/1/0 是否显示菜单栏，默认yes resizable=yes/no/1/0 窗口是否可调节尺寸，默认yes titlebar=yes/no/1/0 是否显示标题栏，默认yes fullscreen=yes/no/1/0 是否使用全屏模式显示浏览器，默认no history对象history对象提供用户最近浏览过的URL列表。但出于隐私方面的原因， history对象不再允许脚本访问已经访问过的实际URL，可以使用 history对象提供的、逐个返回访问过的页面的方法 history对象方法 名称 &emsp; 描述 back() 加载history对象列表中的前一个URL forward() 加载history对象列表中的后一个URL go() 加载history对象列表中的某一个具体URL back()方法会让浏览器加载前一个浏览过的文档， history.back()等效于浏览器中的“后退”按钮。forward()方法会让浏览器加载后一个浏览过的文档， history， forward()等效于浏览器中的前进”按钮”go(n)方法中的n是一个具体的数字，当n＞0时，装入历史列表中往前数的第n个页面:当n＝0时，装入当前页面:当n＜0时，装入历史列表中往后数的第n个页面。例如:&emsp;&emsp;history.go(1)代表前进1页，相当于浏览器中的“前进”按钮，等价于 forward()方法&emsp;&emsp;history.go(-1)代表后退1页，相当于浏览器中的“后退”按钮，等价于back)方法 location对象location对象提供当前页面的URL信息，并且可以重新装载当前页面或装入新页面 location对象的属性 名称 &emsp; 描述 host 设置或返回主机名和当前URL的端口号 hostname 设置或返回当前URL的主机名 href 设置或返回完整的URL location对象的方法 名称 &emsp; 描述 reload() 重新加载当前文档 replace() 用新的文档替换当前文档 Document对象常用属性 名称 &emsp; 描述 referrer 返回载入当前文档的URL URL 返回当前文档的URL 常用方法 名称 &emsp; 描述 getElementById（） 返回对拥有指定id的第一个对象的引用 getElementByName（） 返回带有指定名称的对象的集合 getElementByTagName（） 返回带有指定标签名称的对象的集合 write（） 向文档写文本、HTML表达式或JavaScript代码 动态改变层。标签中的内容 document.getElementById(“id名”).innerHTML=”内容”;innerHTML是几乎所有的HTML元素都有的属性。它是一个字符串，用来设置或获取当前对象的开始标签和结束标签之间的内容 访问相同name的元素，获取元素内容 var aInput=getElementByName（”name”）;aInput.value JavaScript内置对象在 Javascript I中.系统的内置对象有Date对象、Aray对象、 String对象和Math对象等 Date:用于操作日期和时间Aray:用于在单独的变量名中存储一系列的值。String:用于支持对字符串的处理Math:使我们有能力执行常用的数学任务，它包含了若干个数字常量和函数。 其中.Aray对象和 String对象前面已经学习过，下面将介绍Date对象和Math对象 Date对象Javascript中的对象与 Java中的类非常相似.需要使用＂new对象名()”的方法创建一个实例语法var日期实例＝ new Date(参数)日期实例是存储Date对象的变量。可以省略参数，如果没有参数则表示当前时间和日期例如var today＝ new Date();/将当前日期和时间存储在变量today中参数是字符串格式MD.YY.hms表示日var date=new Date (July 15, 2013, 16: 34: 28”) Date对象的常用方法 名称 &emsp; 描述 getDate（） 返回Date对象的一个月中的每一天，其值为1～31 getday（） 返回Date对象的星期中的每一天，其值为0～6 getHours（） 返回Date对象的小时数，其值为0～23 getMinutes（） 返回Date对象的分钟数，其值为0～59 getSeconds（） 返回Date对象的秒数，其值为0～59 getMonth（） 返回Date对象的月份，其值为0～11 getFullYear（） 返回Date对象的年份，其值为四位数 getTime（） 返回自某一时刻(1970年1月1日)以来的毫秒数 getfullyear()返回四位数的年份， get Year()返回二位或四位的年份，常用于获取年份getfullyear()。获取星期几使用 getday(): 0表示周日,1表示周一，6表示周六例： 1234var today = new Date() //获得当前时间var hh = today.gethours(); //获得小时、分钟、秒var mm = today.getminutes(); //获得分钟var ss = today.getSeconds(); //获得秒 math对象常用方法 名称 &emsp; 描述 celi（） 对数进行上舍入 floor（） 对数进行下舍入 round（） 把数四舍五入为最接近的数 random（） 返回0~1中的随机数 例：1-100之间的随机数：Math.floor(Math.random()100+1);2-98之间的随机数：Math.floor(Math.random()98+2); 定时器setTimeout（）用于在指定的毫秒后调用函数或计算表达式 语法：setTimeout（“调用的函数名称”，等待的毫秒数） setInterval（）可按照指定的周期（毫秒）来调用函数或计算表达式 语法：setInterval（“调用的函数名称”，周期性调用函数之间间隔的毫秒数） setTimeout（）是按指定时间后调用函数，setInterval（）是以指定时间为间隔，不停的调用函数 clearTimeout()和clearInterval()clearTimeout()是用来清除setTimeout（）函数设置的定时器clearInterval()是用来清除setInterval（）函数设置的定时器语法 clearTimeout(setTimeout（）的返回值)clearInterval(setInterval（）的返回值)","path":"2019/11/25/JavaScript操作BOM/","date":"11-25","excerpt":"","tags":[{"name":"Javascript","slug":"Javascript","permalink":"https://drshuang.github.io/tags/Javascript/"}]},{"title":"JavaScript基础篇","text":"什么是 Javascript&emsp;&emsp;Javascript是一种描述性语言，也是一种基于对象( Object)和事件驱动( Event Driven)的.并具有安全性能的脚本语言。它与HTML(超文本标记语言)一起。在一个Web页面中链接多个对象与Wb客户实现交互。无论在客户端还是在服务器端， Javascript I应用程序都要下载到浏览器的客户端执行，从而减轻了服务器端的负担。总结其特点如下 Javascript主要用来在HTML页面中添加交互行为。 Javascript是一种脚本语言，语法和Java类似。 Javascript一般用来编写客户端的脚本。 Java 7 cript是一种解释性语音,边编译边执行。 Javascript的组成&emsp;&emsp;尽管 Cmascript是一个重要的标准，但它并不是 Javascript I唯一的部分，当然，它也不是唯一被标准化的部分。实际上，一个完整的 Javascript是由以下三个不同的部分组成的：ECMAScript、BOM、DOM。 一、Ecmascript标准Ecmascript是一种开放的、被国际上广为接受的、标准的脚本语言规范。它不与任何具体的浏览器绑定。 Ecmascript 7标准主要描述了以下内容。 语法 变量和数据类型 运算符 逻辑控制语句 关键字、保留字 对象 ECMASCRIPT是一个描述，规定了脚本语言的所有属性、方法和对象的标准，因此在使用Web客白端脚本语言编码时一定要遵循 Ecmascript标准。 二、浏览器对象模型&emsp;&emsp;浏览器对象模型( Browser Object Model，BoM)，提供了独立于内容与浏览器窗口进行交互的对象，使用浏览器对象模型可以实现与 HTML的交互，如网上常见的弹出窗口.前进后退等功能都是浏览器对象控制的 三、文档对象模型&emsp;&emsp;文档对象模型( Document Object Model，DOM)，是HTML文档对象模型( HTML DON)定义的一套标准方法，用来访问和操纵HTML文档，如网上商城常见的随鼠标移动显示大的图片、弹出小提示等都是文档对象的功劳。 Javascript的基本结构123&lt;script type=&quot;text/Javascript&quot;&gt; javaScript语句;&lt;/script&gt; Javascript引入方式内部引入 123&lt;script type=&quot;text/Javascript&quot;&gt; javaScript语句;&lt;/script&gt; 外部引入 1&lt;script type=&quot;text/Javascript src=&quot;Javascript文件地址&quot;&gt;&lt;/script&gt; Javascript核心语法变量的声明和赋值&emsp;&emsp;声明：var 变量名;&emsp;&emsp;赋值：变量名=值;边声明边赋值var 变量名=值;&emsp;&emsp;var 变量名1=值，变量名2=值，……;数据类型&emsp;&emsp;在JavaScript中声明时不需要声明变量的数据类型，而是有赋值的变量值决定，在JavaScript中提供的数据类型有一下几种： undefined(未定义类型) null(空类型) number(数值类型) String(字符串类型) boolean(布尔类型) ECMAScript提供了typeof运算符来判断一个值或变量的数据类型&emsp;&emsp;typeof(变量或值)其返回结果有以下几种。 undefined:如果变量是 undefined类型的，则返回 undefined类型的结果 number:如果变量是 number类型的，则返回 number类型的结果 String:如果变量是 String类型的，则返回 string类型的结果。 boolean:如果变量是 boolean类型的，则返回 boolean类型的结果 object：如果变量是nul类型，或者变量是一种引用类型，如对象、函数、数组，则返回object类型的结果在number中有个特殊值NaN（not a number）表示非数 String类型方法：字符串对象.方法名（）； 方法 描述 charAt(undex) 返回指定位置的字符 indexof(str，index) 查找某个字符在字符串中的位置 substring(index1,index2) 返回指定索引index1和index2之间的字符（返回的字符串包含index1不包含index2） split(str) 将字符串分割字符串数组 length 返回字符串的长度 数组 创建数组：var 数组名=new Array（数组长度）； 赋值： var 数组名=new Array（值1，值2，…）； var 数组名=new Array（数组长度）；数组名[下标]=值； 方法 &emsp;&emsp; 描述 length 设置或返回数组中元素的数目 jion() 把数组的所有元素放入一个字符串，通过分隔符进分割 sort() 对数组排序 push() 向数组末尾添加一个或更多元素，并返回新的长度 运算符 方类别法 运算符号 算数运算符 +、-、*、/、%、++、– 比较运算符 &gt;、&lt;、&gt;=、&lt;=、==、！=、===、！== 逻辑运算符 &amp;&amp;、` 赋值运算符 =、+=、-= 逻辑控制语句 条件结构： 12345if(表达式)&#123; 语句1；&#125;else&#123; 语句2；&#125; switch结构： 123456789switch(表达式)&#123; case 值1： 语句1； case 值2： 语句2； default： 语句； break；&#125; 循环结构 for循环 123for(初始化；条件；增量或减量)&#123; 语句；&#125; while循环 123while(条件)&#123; 语句；&#125; do-while循环 123do&#123; 语句&#125;while(条件)； for-in循环 123for(变量 in 对象)&#123; 语句；&#125; 输入提示框：prompt（）； 输出提示框：alert（）； 类型转换： 方法 &emsp;&emsp; 描述 parseInt(“字符串”) 将字符串转换为整型数字 parseFloat(“字符串”) 将字符串转换为浮点型数字 isNaN（） 用于检查参数是否是非数字 定义函数： 1234function 函数名（参数1，参数2，...）&#123; 语法； [返回值；]&#125; 调用函数&emsp;&emsp;函数调用一般和表单元素的事件一起使用，调用格式：事件名=“函数名（）”","path":"2019/11/24/Javascript基础/","date":"11-24","excerpt":"","tags":[{"name":"Javascript","slug":"Javascript","permalink":"https://drshuang.github.io/tags/Javascript/"}]},{"title":"HTML标签","text":"head标签 title标签 body标签head位于html网页的头部，&lt;html&gt;后&lt;body&gt;前的标签，并&lt;head&gt;开头&lt;/head&gt;结尾，&lt;head&gt;包含标签&lt;meta&gt;、&lt;title&gt;、&lt;base&gt;、&lt;script&gt;等常用标签head包含标签说明title是网页唯一标题标签 -title标签base是网页默认打开方式声明标签 baselink是一个链接标签，包括外部css文件引用、js文件引用、favicon.ico图标引用等作用meta包含广泛的内容标签，如网页关键字、网页介绍、作者、网页编码、robots、自动跳转等声明及说明标签。script是引入外部js文件作用style直接嵌入网页的js或css文件标签。body是html网页结构最重要的标签，也叫主体内容标签。 语法12345678910&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;title&gt;标题&lt;/title&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;/head&gt; &lt;body&gt; 主体内容 &lt;/body&gt;&lt;/html&gt; 标题标签HTML共提供六级标题&lt;h1&gt;~&lt;h6&gt;，并赋予了一定的外观，所有标题字体加粗，其中&lt;h1&gt;字号最大，&lt;h6&gt;字号最小，并且独占一行。 123456&lt;h1&gt;一级标题&lt;/h1&gt;&lt;h2&gt;二级标题&lt;/h2&gt;&lt;h3&gt;三级标题&lt;/h3&gt;&lt;h4&gt;四级标题&lt;/h4&gt;&lt;h5&gt;五级标题&lt;/h5&gt;&lt;h6&gt;六级标题&lt;/h6&gt; 一级标题 二级标题 三级标题 四级标题 五级标题 六级标题 段落标签段落标签以&lt;P&gt;开头以&lt;/P&gt;结尾，在P标签内的内容为一个段落，独占一行或几行，并且段与段之间有一行空行。 12345678910111213&lt;h2&gt;水调歌头·明月几时有&lt;/h2&gt;&lt;p&gt;明月几时有？把酒问青天。不知天上宫阙，今夕是何年。我欲乘风归去，又恐琼楼玉宇，高处不胜寒。起舞弄清影，何似在人间？&lt;/p&gt;&lt;p&gt;转朱阁，低绮户，照无眠。不应有恨，何事长向别时圆？人有悲欢离合，月有阴晴圆缺，此事古难全。但愿人长久，千里共婵娟。&lt;/p&gt; 水调歌头·明月几时有 明月几时有？把酒问青天。 不知天上宫阙，今夕是何年。 我欲乘风归去，又恐琼楼玉宇，高处不胜寒。 起舞弄清影，何似在人间？ 转朱阁，低绮户，照无眠。 不应有恨，何事长向别时圆？ 人有悲欢离合，月有阴晴圆缺，此事古难全 。但愿人长久，千里共婵娟。 换行标签换行标签&lt;br/&gt;表示强制换行显示，该标签比较特殊，没有结束标签，直接使用&lt;br/&gt;表示开始和结束。 1234567&lt;h2&gt;水调歌头·明月几时有&lt;/h2&gt;&lt;p&gt;明月几时有？把酒问青天。&lt;br/&gt;不知天上宫阙，今夕是何年。&lt;br/&gt;我欲乘风归去，又恐琼楼玉宇，高处不胜寒。&lt;br/&gt;起舞弄清影，何似在人间？&lt;br/&gt;&lt;/p&gt; 明月几时有？把酒问青天。 不知天上宫阙，今夕是何年。 我欲乘风归去，又恐琼楼玉宇，高处不胜寒。 起舞弄清影，何似在人间？ 水平线标签顾名思义，水平线标签&lt;hr/&gt;表示已条水平线，该标签和&lt;hr/&gt;一样没有结束标签。 12345678&lt;h2&gt;水调歌头·明月几时有&lt;/h2&gt;&lt;hr/&gt;&lt;p&gt;明月几时有？把酒问青天。&lt;br/&gt;不知天上宫阙，今夕是何年。&lt;br/&gt;我欲乘风归去，又恐琼楼玉宇，高处不胜寒。&lt;br/&gt;起舞弄清影，何似在人间？&lt;br/&gt;&lt;/p&gt; 水调歌头·明月几时有 明月几时有？把酒问青天。 不知天上宫阙，今夕是何年。 我欲乘风归去，又恐琼楼玉宇，高处不胜寒。 起舞弄清影，何似在人间？ 字体样式标签加粗字体可以使用&lt;strong&gt;&lt;/strong&gt;标签，字体倾斜&lt;em&gt;&lt;/em&gt; 1234567&lt;h2&gt;水调歌头·明月几时有&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;明月几时有？把酒问青天。&lt;/strong&gt;&lt;br/&gt;&lt;em&gt;不知天上宫阙，今夕是何年。&lt;/em&gt;&lt;br/&gt;我欲乘风归去，又恐琼楼玉宇，高处不胜寒。&lt;br/&gt;起舞弄清影，何似在人间？&lt;br/&gt;&lt;/p&gt; 水调歌头·明月几时有 明月几时有？把酒问青天。 不知天上宫阙，今夕是何年。 我欲乘风归去，又恐琼楼玉宇，高处不胜寒。 起舞弄清影，何似在人间？ 注释和特殊符号注释是为了方便代码阅读和调试。当浏览器遇到注释是会自动忽略注释内容。注释用`表示。在网页上还有一些比较特殊的符号比如”&lt;”、”&gt;”等等。 特殊符号 字符实体 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 示例 空格 &amp;nbsp； &lt;a href=&quot;#&quot;&gt;百度&lt;/a&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&quot;#&quot;&gt;Baidu&lt;/a&gt; 大于号（&gt;） &amp;gt； 8 &amp;gt；6 小于号（&lt;） &amp;lt； 8 &amp;lt；10 引号（”） &amp;quot； &amp;quot；早上好 &amp;quot； 版权符号（©） &amp;copy； &amp;copy；2019 www.baidu.com 百度&nbsp;&nbsp;Baidu；8&gt;6；8&lt;10；&quot;早上好 &quot;；&copy;X2019 www.baidu.com 图像标签基本语法：&lt;img src=&quot;图片地址&quot; alt=&quot;图片的代替文字&quot; title=&quot;鼠标悬停提示文字&quot; width=&quot;图片宽度&quot; height=&quot;图片高度&quot; /&gt; 超链接标签基本语法：&lt;a href=&quot;链接地址&quot; target=&quot;目标窗口位置&quot;&gt;链接文本或图片&lt;/a&gt;href:表示连接地址路径。target:指定连接在哪个窗口打开，常用的取值有_self(自身窗口)、_bank(新建窗口)。 锚链接基本语法：&lt;a name=&quot;marker&quot;&gt;目标位置乙&lt;/a&gt;name为标签的属性，marker为标记名。 也可用id属性做标记，兼容性更好。&lt;a href=&quot;#marker&quot;&gt;当前位置甲&lt;/a&gt;设置甲位置连接路径href属性值为“#+目标乙的标记名”，此中的”#”表示本页面。","path":"2019/11/10/HTML基本标签/","date":"11-10","excerpt":"","tags":[{"name":"HTML","slug":"HTML","permalink":"https://drshuang.github.io/tags/HTML/"}]},{"title":"一杯爱的感动","text":"一池墨影，半扇花香。 细数着院里丁香点点，花瓣片片。伴着细雨丝丝潺潺，吊钟花蕊摇曳着悠悠的身段，和蜂蜜交响曲相思起舞。 执前紫案上的蓝叶，弯曲着菁绿色翠的长叶，轻抚着书笺春意的诗行，墨香里一袭横斜暖阳着秋凉的绵绵。一支韵笔涂抹夕阳西下的几束长云，染着黄润、泽色瑰丽，描摹着一盏秋色的淡妆。 一条长长的石巷，延伸着无尽的目光，前看不到花香、后追逐着雨霜。斑驳里桃花无源、杏花不开，苍凉着一片红尘中沙砾的悲哀。长街朦胧，雾霾沉沉。浮生着三世无果的期盼和一份孤独静默的眷恋。 一扇冷风的窗外，飘泊散落的金桂，香袭着一街零星的幽长。淡淡的、轻轻的、微微的，连着长巷的前夜，牵着长巷的凌晨，一遍又一遍的翻遍角落，寻找着缝隙中的记忆。 一伞青花哒哒哒的敲着石板，演奏着散落的恋曲，相思着曾经拥有过的桂花下的诗话。 一抹淡淡的青花风雨蔓延着窗外的情缘，激情着朦胧中那把青花下的相拥。 四目相情、缘眷心灵，弯眉上凝香望月点缀嫣红。 窗里窗外相隔一张薄薄的纸，却远去了三生的遥远。悲凉的看着花开，却不见花落。寒窗染霜，细数薄凉。旧情早已不再，风花败落山水。 随水飘落，流淌着碎叶。指缝里落下了绵绵细言，染黄了桅杆上那盏昏暗的无奈。不是情缘浓淡，不是距离近远，不是耳鬓厮磨，也不是陌生不识。真的不需要理由相拥烈焰，红唇齿白，真的不需要理由分手微微一笑，轻轻握手。 相爱是缘，两颗心撞出了火花。分手是情，两颗心珍惜过往。送一束心花给你，采一朵缱绻于她。终是人生中的一抹情一场爱，放在心底也是最美好的记忆。 伏案静坐，久思念想。长卷上落笔，笔尖上流淌着满满的爱意，清晰的笔划里一笔爱恋、一笔祝福，把曾经的过往刻成光盘，时不时听听、想想，笑笑、哭哭。独饮一杯温暖、一个故事、一场感动。 在岁月两旁的路上，播种撒花。细细的听着花开的声音、感动着花香的生息，去寻找着自己的心爱……","path":"2019/11/06/一杯爱的感动/","date":"11-06","excerpt":"一池墨影，半扇花香。 细数着院里丁香点点，花瓣片片。伴着细雨丝丝潺潺，吊钟花蕊摇曳着悠悠的身段，和蜂蜜交响曲相思起舞。","tags":[{"name":"标签","slug":"标签","permalink":"https://drshuang.github.io/tags/%E6%A0%87%E7%AD%BE/"}]},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","path":"2019/11/05/hello-world/","date":"11-05","excerpt":"","tags":[]}]}